basePath: /api/v1
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.AuthResponse:
    properties:
      expires_at:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.OTPRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  models.OTPResponse:
    properties:
      expires_in_minutes:
        type: integer
      message:
        type: string
    type: object
  models.OTPVerification:
    properties:
      code:
        type: string
      phone_number:
        type: string
    required:
    - code
    - phone_number
    type: object
  models.UserListResponse:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      phone_number:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A backend service for OTP-based authentication and user management
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: OTP Authentication API
  version: "1.0"
paths:
  /auth/otp/generate:
    post:
      consumes:
      - application/json
      description: Generate a new OTP code for the provided phone number
      parameters:
      - description: Phone number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Generate OTP for phone number
      tags:
      - auth
  /auth/otp/verify:
    post:
      consumes:
      - application/json
      description: Verify OTP code and authenticate/register user
      parameters:
      - description: OTP verification
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OTPVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Verify OTP and authenticate user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users with optional search
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Search by phone number
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users with pagination and search
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
